% Generated by roxygen2: do not edit by hand
% Please edit documentation in scomps_rmarkdown_litr.rmd.
\name{distribute_process_grid}
\alias{distribute_process_grid}
\title{Process a given function in the entire or partial computational grids}
\usage{
distribute_process_grid(grids, grid_target_id = NULL, fun, ...)
}
\arguments{
\item{grids}{sf/SpatVector object. Computational grids. It takes a strict assumption that the grid input is an output of \code{get_computational_regions}}

\item{grid_target_id}{character(1) or numeric(2). Default is NULL. If NULL, all grid_ids are used. \code{"id_from:id_to"} format or \code{c(unique(grid_id)[id_from], unique(grid_id)[id_to])}}

\item{fun}{function supported in scomps.}

\item{...}{Arguments passed to the argument \code{fun}.}
}
\value{
a data.frame object with computation results. For entries of the results, consult the function used in \code{fun} argument.
}
\description{
Currently only accepting \link[future]{multicore} setting (single node, single process, and multiple threads). For details of the terminology in \code{future} package, refer to \link[future]{plan}. This function assumes that users have one raster file and a sizable and spatially distributed target locations. Each thread will process ceiling(|Ng|/|Nt|) grids where |Ng| denotes the number of grids and |Nt| denotes the number of threads.
}
\examples{
library(future)
plan(multicore, workers = 4)
# Does not run ...
# distribute_process_grid()
}
\author{
Insang Song \email{geoissong@gmail.com}
}